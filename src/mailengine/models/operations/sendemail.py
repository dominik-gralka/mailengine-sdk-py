"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import httpmetadata as components_httpmetadata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from mailengine import utils
from typing import Optional

class ContentType(str, Enum):
    r"""Content type of the email (optional)"""
    TEXT_PLAIN = 'text/plain'
    TEXT_HTML = 'text/html'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendEmailRequestBody:
    recipient_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipientEmail'), 'exclude': lambda f: f is None }})
    recipient_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipientName'), 'exclude': lambda f: f is None }})
    sender_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senderEmail'), 'exclude': lambda f: f is None }})
    sender_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senderName'), 'exclude': lambda f: f is None }})
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailSubject'), 'exclude': lambda f: f is None }})
    email_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailContent'), 'exclude': lambda f: f is None }})
    debug: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debug'), 'exclude': lambda f: f is None }})
    r"""Enable debug mode (optional)"""
    content_type: Optional[ContentType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentType'), 'exclude': lambda f: f is None }})
    r"""Content type of the email (optional)"""
    



@dataclasses.dataclass
class SendEmailResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field()
    

